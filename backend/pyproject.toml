[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Admin <admin@example.com>"]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
uvicorn = {extras = ["standard"], version = "^0.24.0.post1"}
fastapi = "^0.109.1"
python-multipart = "^0.0.7"
email-validator = "^2.1.0.post1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
tenacity = "^8.2.3"
pydantic = "2.9.2"
emails = "^0.6"
zhipuai = "2.1.5.20230904"
numexpr =   "2.10.1"
gunicorn = "^22.0.0"
jinja2 = "^3.1.4"
alembic = "^1.12.1"

psycopg = {extras = ["binary"], version = "^3.1.13"}
sqlmodel = "0.0.21"
# Pin bcrypt until passlib supports the latest
bcrypt = "4.0.1"
pydantic-settings = "^2.6.1"
sentry-sdk = {extras = ["fastapi"], version = "^2.8.0"}
langchain = "^0.3.7"
langchain-community = "^0.3.5"
langchain-core = "^0.3.28"
langchain-experimental = "^0.3.3"
langchain-text-splitters = "^0.3.2"

langgraph = "^0.2.60"
langgraph-checkpoint = "^2.0.9"
langgraph-sdk = "^0.1.48"
langsmith = "^0.1.141"
grandalf = "^0.8"

duckduckgo-search = "6.1.0"
wikipedia = "^1.4.0"
google-search-results = "^2.4.2"
yfinance = "^0.2.38"

pyjwt = "^2.8.0"
asyncpg = "^0.29.0"
asyncpg-stubs = "^0.29.1"
langchain-qdrant = "^0.1.4"
fastembed = "^0.3.1"
qdrant-client = "1.11.3"
coverage = "^7.5.4"
celery = "^5.4.0"
redis = "^5.0.7"
celery-stubs = "^0.1.3"
pymupdf = "^1.24.7"
pymongo = "^4.10.1"
langgraph-checkpoint-postgres = "<=2.0.9"
aiofiles = "^24.1.0"
autoflake = "^2.3.1"
black = "^24.10.0"
isort = "^5.13.2"

crewai = "<=0.86.0"
langchain-google-genai = "^2.0.7"
httpx = {extras = ["socks"], version = ">=0.27.0,<0.28.0"}
langchain-ollama = "^0.2.2"
mcp = "^1.3.0"
langchain-mcp-adapters = "^0.0.3"
[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
mypy = "^1.8.0"
ruff = "^0.2.2"
pre-commit = "^3.6.2"
types-python-jose = "^3.3.4.20240106"
types-passlib = "^1.7.7.20240106"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple"
priority = "primary"